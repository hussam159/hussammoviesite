{"ast":null,"code":"import _toConsumableArray from \"/Users/hussam/SFDS project/react-movies-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar API_KEY = '058870725be2093ac363f07f36672e0d';\nconsole.log(API_KEY);\nexport function searchMovie(title, page) {\n  var API_URL = \"https://api.themoviedb.org/3/search/movie?api_key=\".concat(API_KEY, \"&append_to_response=releases\");\n  console.log(API_URL);\n  return new Promise(function (resolve, reject) {\n    fetch(\"\".concat(API_URL, \"&query=\").concat(encodeURI(title), \"&page=\").concat(page)).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nexport function getGenresByID(ids) {\n  var genres = [{\n    id: 28,\n    name: 'Action'\n  }, {\n    id: 12,\n    name: 'Adventure'\n  }, {\n    id: 16,\n    name: 'Animation'\n  }, {\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 80,\n    name: 'Crime'\n  }, {\n    id: 99,\n    name: 'Documentary'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 10751,\n    name: 'Family'\n  }, {\n    id: 14,\n    name: 'Fantasy'\n  }, {\n    id: 36,\n    name: 'History'\n  }, {\n    id: 27,\n    name: 'Horror'\n  }, {\n    id: 10402,\n    name: 'Music'\n  }, {\n    id: 9648,\n    name: 'Mystery'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }, {\n    id: 878,\n    name: 'Science Fiction'\n  }, {\n    id: 10770,\n    name: 'TV Movie'\n  }, {\n    id: 53,\n    name: 'Thriller'\n  }, {\n    id: 10752,\n    name: 'War'\n  }, {\n    id: 37,\n    name: 'Western'\n  }];\n  var data = [];\n  ids.forEach(function (id) {\n    var genre = genres.find(function (g) {\n      return id === g.id;\n    });\n    data = [].concat(_toConsumableArray(data), [genre]);\n  });\n  return data;\n}\nexport function getPopularMovies(page) {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://api.themoviedb.org/3/movie/popular?api_key=\".concat(API_KEY, \"&language=en-US&page=\").concat(page)).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nexport function getTopRated(page) {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://api.themoviedb.org/3/movie/top_rated?api_key=\".concat(API_KEY, \"&page=\").concat(page)).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nexport function getDetailedMovie(movieID) {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://api.themoviedb.org/3/movie/\".concat(movieID, \"?api_key=\").concat(API_KEY)).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/hussam/SFDS project/react-movies-master/src/services/moviesService.js"],"names":["API_KEY","console","log","searchMovie","title","page","API_URL","Promise","resolve","reject","fetch","encodeURI","then","res","json","catch","err","getGenresByID","ids","genres","id","name","data","forEach","genre","find","g","getPopularMovies","getTopRated","getDetailedMovie","movieID"],"mappings":"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","sourcesContent":["const API_KEY = '058870725be2093ac363f07f36672e0d'\nconsole.log(API_KEY)\nexport function searchMovie(title, page) {\n  let API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&append_to_response=releases`\n  console.log(API_URL);\n  return new Promise((resolve, reject) => {\n    fetch(`${API_URL}&query=${encodeURI(title)}&page=${page}`)\n      .then(res => res.json())\n      .then(json => {\n        resolve(json)\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport function getGenresByID(ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action'\n    },\n    {\n      id: 12,\n      name: 'Adventure'\n    },\n    {\n      id: 16,\n      name: 'Animation'\n    },\n    {\n      id: 35,\n      name: 'Comedy'\n    },\n    {\n      id: 80,\n      name: 'Crime'\n    },\n    {\n      id: 99,\n      name: 'Documentary'\n    },\n    {\n      id: 18,\n      name: 'Drama'\n    },\n    {\n      id: 10751,\n      name: 'Family'\n    },\n    {\n      id: 14,\n      name: 'Fantasy'\n    },\n    {\n      id: 36,\n      name: 'History'\n    },\n    {\n      id: 27,\n      name: 'Horror'\n    },\n    {\n      id: 10402,\n      name: 'Music'\n    },\n    {\n      id: 9648,\n      name: 'Mystery'\n    },\n    {\n      id: 10749,\n      name: 'Romance'\n    },\n    {\n      id: 878,\n      name: 'Science Fiction'\n    },\n    {\n      id: 10770,\n      name: 'TV Movie'\n    },\n    {\n      id: 53,\n      name: 'Thriller'\n    },\n    {\n      id: 10752,\n      name: 'War'\n    },\n    {\n      id: 37,\n      name: 'Western'\n    }\n  ]\n  let data = []\n\n  ids.forEach(id => {\n    let genre = genres.find(g => id === g.id)\n    data = [...data, genre]\n  })\n\n  return data\n}\n\nexport function getPopularMovies(page) {\n  return new Promise((resolve, reject) => {\n    fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`\n    )\n      .then(res => res.json())\n      .then(json => {\n        resolve(json)\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport function getTopRated(page) {\n  return new Promise((resolve, reject) => {\n    fetch(\n      `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&page=${page}`\n    )\n      .then(res => res.json())\n      .then(json => {\n        resolve(json)\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport function getDetailedMovie(movieID) {\n  return new Promise((resolve, reject) => {\n    fetch(`https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}`)\n      .then(res => res.json())\n      .then(json => {\n        resolve(json)\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}